# JMH version: 1.33
# VM version: JDK 15.0.2, Java HotSpot(TM) 64-Bit Server VM, 15.0.2+7-27
# VM invoker: C:\Program Files\Java\jdk-15.0.2\bin\java.exe
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xmx16G -Xms16G -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.2\lib\idea_rt.jar=49294:C:\Program Files\JetBrains\IntelliJ IDEA 2020.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 2 iterations, 1 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: eu.happycoders.biasedlocking.BiasedLockingVectorBenchmark.test

# Run progress: 0,00% complete, ETA 00:00:20
# Fork: 1 of 5
# Warmup Iteration   1: 0,202 ±(99.9%) 0,023 s/op
# Warmup Iteration   2: 0,195 ±(99.9%) 0,010 s/op
Iteration   1: 0,195 ±(99.9%) 0,016 s/op
                 test·p0.00:   0,192 s/op
                 test·p0.50:   0,193 s/op
                 test·p0.90:   0,207 s/op
                 test·p0.95:   0,207 s/op
                 test·p0.99:   0,207 s/op
                 test·p0.999:  0,207 s/op
                 test·p0.9999: 0,207 s/op
                 test·p1.00:   0,207 s/op

Iteration   2: 0,195 ±(99.9%) 0,004 s/op
                 test·p0.00:   0,193 s/op
                 test·p0.50:   0,195 s/op
                 test·p0.90:   0,197 s/op
                 test·p0.95:   0,197 s/op
                 test·p0.99:   0,197 s/op
                 test·p0.999:  0,197 s/op
                 test·p0.9999: 0,197 s/op
                 test·p1.00:   0,197 s/op


# Run progress: 20,00% complete, ETA 00:00:22
# Fork: 2 of 5
# Warmup Iteration   1: 0,202 ±(99.9%) 0,043 s/op
# Warmup Iteration   2: 0,199 ±(99.9%) 0,050 s/op
Iteration   1: 0,197 ±(99.9%) 0,017 s/op
                 test·p0.00:   0,190 s/op
                 test·p0.50:   0,195 s/op
                 test·p0.90:   0,208 s/op
                 test·p0.95:   0,208 s/op
                 test·p0.99:   0,208 s/op
                 test·p0.999:  0,208 s/op
                 test·p0.9999: 0,208 s/op
                 test·p1.00:   0,208 s/op

Iteration   2: 0,217 ±(99.9%) 0,028 s/op
                 test·p0.00:   0,204 s/op
                 test·p0.50:   0,220 s/op
                 test·p0.90:   0,222 s/op
                 test·p0.95:   0,222 s/op
                 test·p0.99:   0,222 s/op
                 test·p0.999:  0,222 s/op
                 test·p0.9999: 0,222 s/op
                 test·p1.00:   0,222 s/op


# Run progress: 40,00% complete, ETA 00:00:16
# Fork: 3 of 5
# Warmup Iteration   1: 0,233 ±(99.9%) 0,046 s/op
# Warmup Iteration   2: 0,212 ±(99.9%) 0,025 s/op
Iteration   1: 0,206 ±(99.9%) 0,014 s/op
                 test·p0.00:   0,202 s/op
                 test·p0.50:   0,206 s/op
                 test·p0.90:   0,211 s/op
                 test·p0.95:   0,211 s/op
                 test·p0.99:   0,211 s/op
                 test·p0.999:  0,211 s/op
                 test·p0.9999: 0,211 s/op
                 test·p1.00:   0,211 s/op

Iteration   2: 0,207 ±(99.9%) 0,011 s/op
                 test·p0.00:   0,204 s/op
                 test·p0.50:   0,206 s/op
                 test·p0.90:   0,211 s/op
                 test·p0.95:   0,211 s/op
                 test·p0.99:   0,211 s/op
                 test·p0.999:  0,211 s/op
                 test·p0.9999: 0,211 s/op
                 test·p1.00:   0,211 s/op


# Run progress: 60,00% complete, ETA 00:00:10
# Fork: 4 of 5
# Warmup Iteration   1: 0,211 ±(99.9%) 0,024 s/op
# Warmup Iteration   2: 0,202 ±(99.9%) 0,010 s/op
Iteration   1: 0,203 ±(99.9%) 0,022 s/op
                 test·p0.00:   0,197 s/op
                 test·p0.50:   0,202 s/op
                 test·p0.90:   0,213 s/op
                 test·p0.95:   0,213 s/op
                 test·p0.99:   0,213 s/op
                 test·p0.999:  0,213 s/op
                 test·p0.9999: 0,213 s/op
                 test·p1.00:   0,213 s/op

Iteration   2: 0,205 ±(99.9%) 0,010 s/op
                 test·p0.00:   0,202 s/op
                 test·p0.50:   0,203 s/op
                 test·p0.90:   0,208 s/op
                 test·p0.95:   0,208 s/op
                 test·p0.99:   0,208 s/op
                 test·p0.999:  0,208 s/op
                 test·p0.9999: 0,208 s/op
                 test·p1.00:   0,208 s/op


# Run progress: 80,00% complete, ETA 00:00:05
# Fork: 5 of 5
# Warmup Iteration   1: 0,208 ±(99.9%) 0,042 s/op
# Warmup Iteration   2: 0,199 ±(99.9%) 0,010 s/op
Iteration   1: 0,200 ±(99.9%) 0,012 s/op
                 test·p0.00:   0,197 s/op
                 test·p0.50:   0,198 s/op
                 test·p0.90:   0,208 s/op
                 test·p0.95:   0,208 s/op
                 test·p0.99:   0,208 s/op
                 test·p0.999:  0,208 s/op
                 test·p0.9999: 0,208 s/op
                 test·p1.00:   0,208 s/op

Iteration   2: 0,201 ±(99.9%) 0,009 s/op
                 test·p0.00:   0,197 s/op
                 test·p0.50:   0,201 s/op
                 test·p0.90:   0,205 s/op
                 test·p0.95:   0,205 s/op
                 test·p0.99:   0,205 s/op
                 test·p0.999:  0,205 s/op
                 test·p0.9999: 0,205 s/op
                 test·p1.00:   0,205 s/op



Result "eu.happycoders.biasedlocking.BiasedLockingVectorBenchmark.test":
  N = 55
  mean =      0,202 ±(99.9%) 0,004 s/op

  Histogram, s/op:
    [0,180, 0,185) = 0 
    [0,185, 0,190) = 1 
    [0,190, 0,195) = 10 
    [0,195, 0,200) = 13 
    [0,200, 0,205) = 13 
    [0,205, 0,210) = 11 
    [0,210, 0,215) = 3 
    [0,215, 0,220) = 2 
    [0,220, 0,225) = 2 
    [0,225, 0,230) = 0 

  Percentiles, s/op:
      p(0,0000) =      0,190 s/op
     p(50,0000) =      0,202 s/op
     p(90,0000) =      0,212 s/op
     p(95,0000) =      0,220 s/op
     p(99,0000) =      0,222 s/op
     p(99,9000) =      0,222 s/op
     p(99,9900) =      0,222 s/op
     p(99,9990) =      0,222 s/op
     p(99,9999) =      0,222 s/op
    p(100,0000) =      0,222 s/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt  Score   Error  Units
BiasedLockingVectorBenchmark.test               sample   55  0,202 ± 0,004   s/op
BiasedLockingVectorBenchmark.test:test·p0.00    sample       0,190           s/op
BiasedLockingVectorBenchmark.test:test·p0.50    sample       0,202           s/op
BiasedLockingVectorBenchmark.test:test·p0.90    sample       0,212           s/op
BiasedLockingVectorBenchmark.test:test·p0.95    sample       0,220           s/op
BiasedLockingVectorBenchmark.test:test·p0.99    sample       0,222           s/op
BiasedLockingVectorBenchmark.test:test·p0.999   sample       0,222           s/op
BiasedLockingVectorBenchmark.test:test·p0.9999  sample       0,222           s/op
BiasedLockingVectorBenchmark.test:test·p1.00    sample       0,222           s/op
